#include <ESP8266WiFi.h>
#include <Adafruit_MotorShield.h>
#include <Servo.h>
#include "HPGL.h"
#include "net.h"
#include "plotter.h"

//
// Inkscape HPGL definitions: 
//  400-DPI for each X and Y
//  "Auto align"
//  Overcut 0 
//  Offset correction 0
//

void setup() {
  Serial.begin(115200);           // set up Serial library at 9600 bps
  delay(500);

  Serial.println("Up");

  netInit();
  plotterInit();
}

class PlotterHPGLAdapter : public PlotterInterface {
    void penDown() {
      plotterPenDown();
    }

    virtual void penUp() {
      plotterPenUp();
    }

    virtual void moveTo(int x, int y) {
      plotterMoveTo(x, y);
    }
};

const char *DEMO_HPGL = 
  "IN;PU;SP1;PU198,3;PD1,179,2,180,4,180,5,179,200,353,201,351,201,350,200,349,396,175,394,174,393,174,391,175,196,1,195,3,195,4,196,5,187,13;PU196,5;PD197,6,88,180,90,180,91,180,200,353,201,352,201,351,201,349,200,348,308,175,306,174,305,175,197,1,195,2,195,4,196,5,197,6,190,16;PU69,422;PD68,421,67,419,56,419,56,418,52,417,49,415,47,413,47,412,46,410,47,409,46,406,46,403,47,400,48,398,49,398,50,396,52,394,53,395,55,393,55,394,57,393,58,393,64,392,64,393,68,394,72,395,72,396,75,398,75,399,78,401,77,402,80,405,79,406,81,410,82,415,81,415,82,420,81,420,81,423,80,422,79,421,79,420,67,420,67,419,56,419,56,418;PU90,424;PD91,422,92,421,93,421,93,382,91,383,90,384,90,385,79,385,79,387,80,388,81,388,81,399,80,398,79,397,79,395,79,394,80,393,75,388,69,385,63,383,63,384,55,383,55,384,50,384,46,386,42,388,39,391,39,392,37,395,35,399,36,399,35,403,35,408,36,413,38,418,41,422,41,421,45,425,45,424,50,427,50,426,55,428,55,427,61,428,69,428,84,428,84,430,83,431,81,431,81,432,81,436,80,436,79,439,77,442,77,441,74,444,74,443,71,445,71,444,67,446,67,445,64,446,63,446,59,446,59,445,53,445,48,444,48,443,42,442,43,441,37,439,37,440,38,442,39,443,40,443,40,453,41,453,43,452,43,451,49,453,55,455,55,454,61,455,66,455,73,455,73,454,79,453,79,452,84,450,84,449,88,446,87,445,90,441,90,440,92,435,91,435,93,429,92,429,93,421,93,409;PU127,392;PD127,392,127,356,125,357,124,358,124,359,112,359,113,361,114,362,115,362,115,457,117,456,118,455,118,454,130,454,129,452,128,451,127,451,127,440,128,441,129,442,130,443,129,445,128,446,132,451,133,450,138,454,138,453,144,455,151,456,151,455,157,454,163,452,162,451,167,448,171,443,170,443,174,437,173,437,176,431,175,431,177,424,176,424,177,416,176,416,176,409,175,409,174,402,171,396,167,391,163,387,162,387,157,384,157,385,152,383,152,384,146,383,146,384,139,384,139,385,133,387,133,388,128,392,129,392,125,398,124,397,124,395,124,394,126,393,127,392,127,381;PU165,416;PD163,417,162,418,162,419,162,421,164,422,165,422,164,428,163,433,161,438,161,437,158,441,155,444,155,443,151,446,151,445,147,446,143,446,143,445,139,445,139,444,135,443,135,442,132,440,133,440,130,437,130,436,128,432,129,432,127,428,127,427,126,422,127,422,127,416,127,410,128,411,128,405,129,405,131,401,133,397,134,398,137,395,140,393,141,394,144,392,145,393,149,393,153,394,157,396,156,396,159,398,159,399,162,402,161,402,163,406,165,411,164,411,165,416,165,422,164,428,163,433,162,434;PU194,456;PD196,456,197,456,198,454,209,454,209,452,208,451,206,451,206,382,205,383,204,384,203,385,192,385,193,387,194,388,195,388,195,457,197,456,198,455,198,454,209,454,209,452,208,451,206,451,206,450;PU195,477;PD197,478,198,479,198,480,209,480,209,479,208,478,206,477,206,463,205,463,204,465,203,466,192,466,193,467,194,469,195,469,195,483,197,483,198,482,198,480,209,480,209,479,208,478,206,477;PU230,451;PD231,451,233,452,233,454,244,454,244,452,243,451,241,451,241,382,240,383,239,384,238,385,227,385,227,387,229,388,230,388,230,457,231,456,233,455,233,454,244,454,244,452,243,451,241,451,241,450;PU230,477;PD231,478,233,479,233,480,244,480,244,479,243,478,241,477,241,463,240,463,239,465,238,466,227,466,227,467,229,469,230,469,230,483,231,483,233,482,233,480,244,480,244,479,243,478,241,477;PU304,440;PD303,441,302,442,301,443,301,444,297,446,297,445,292,446,292,445,288,445,288,444,284,443,284,442,281,440,278,437,279,436,277,433,276,429,275,424,276,424,275,418,275,382,274,383,273,384,273,385,261,385,262,387,263,388,264,388,264,457,266,456,267,455,267,454,278,454,278,452,277,451,275,451,275,440,277,440,278,442,278,443,278,445,277,445,281,451,282,450,287,454,287,453,294,455,301,455,304,455,307,454,306,453,305,452,304,452,304,440,303,441,302,442,301,443,301,444,297,446,297,445,292,446,292,445,290,445;PU337,445;PD337,445,333,445,333,444,329,443,329,442,326,440,323,436,324,436,322,432,321,427,320,422,320,416,321,411,322,405,323,406,324,401,325,401,327,397,327,398,330,395,331,395,334,393,334,394,338,392,338,393,343,393,347,394,351,396,350,396,354,399,353,399,356,402,355,403,358,406,357,407,359,411,358,411,359,416,359,422,359,428,358,428,357,433,355,437,352,441,349,444,349,443,345,446,345,445,341,446,337,446,337,445,333,445,333,444,329,443,329,442,326,440;PU337,454;PD338,453,340,452,342,453,342,454,343,455,350,454,356,452,355,451,361,448,360,448,365,444,364,443,368,438,370,432,370,431,371,424,371,416,370,408,368,401,368,402,365,395,365,396,361,391,356,387,350,384,350,385,344,383,344,384,337,383,337,384,330,384,330,385,324,387,319,390,319,391,315,395,311,401,312,401,309,407,310,407,308,414,309,414,308,422,309,422,309,430,310,430,311,437,312,437,314,443,315,443,318,448,319,448,323,452,324,451,329,454,336,455,343,455,350,454,354,452;SP0;PU0,0;IN;";

void loop() {
 
  Serial.println("Waiting for job...");
  std::string job = netWaitForJob();


  Serial.println("Got job: ");
  Serial.println(job.c_str());
  
  PlotterHPGLAdapter adapter;
  runHpgl(job.c_str(), &adapter);

  Serial.println("Homing");
  plotterPenUp();
  plotterMoveTo(0, 0);
  delay(1000);
}